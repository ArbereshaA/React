{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arbre\\\\OneDrive\\\\Desktop\\\\Inspire11internship\\\\React2Task\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BookCard from \"./BookCard\";\nimport axios from \"axios\";\nimport SortBookCards from \"./SortBookCard\";\nimport FavoriteBook from \"./FavoriteBook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [books, setBooks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [sortbutton, setSortButton] = useState(false);\n  const [showSortComponent, setShowSortComponent] = useState(false);\n  const [favorites, setFavorites] = useState([]);\n  const [showFavorites, setShowFavorites] = useState(false);\n  const fetchBooks = async () => {\n    try {\n      setLoading(true);\n      setProgress(0);\n\n      // Simulate a 3-second delay\n      const duration = 3000;\n      const startTime = Date.now();\n      console.log(\"starttime\", startTime);\n      // Function to update progress\n      const updateProgress = () => {\n        const currentTime = Date.now();\n        const elapsedTime = currentTime - startTime;\n        const percentage = Math.min(elapsedTime / duration * 100, 100); //exp.elapsedtime=1sec/3sec=33.33%\n        setProgress(percentage);\n      };\n\n      // Start updating progress every 100 milliseconds    0.1sec\n      const progressInterval = setInterval(updateProgress, 100);\n      const response = await axios.get(\"https://www.anapioficeandfire.com/api/books?pageSize=30\");\n\n      // Clear the progress update interval when the request is complete\n      clearInterval(progressInterval);\n      console.log(response.data);\n      setBooks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n      // Set progress to 100% when data fetching is complete\n      setProgress(100);\n      setShowSortComponent(true);\n      setSortButton(false); // Reset sortbutton to false when fetching new data\n    }\n  };\n\n  const addToFavorites = book => {\n    if (!favorites.some(favorite => favorite.id === book.id)) {\n      setFavorites([...favorites, book]);\n    }\n  };\n  const removeFromFavorites = isbn => {\n    setFavorites(prevFavorites => {\n      const updatedFavorites = prevFavorites.filter(favorite => favorite.isbn !== isbn);\n      setFavorites(updatedFavorites);\n    });\n    console.log(\"ISBN to remove:\", isbn);\n  };\n\n  // const removeFromFavorites = (index) => {\n  //   setFavorites((prevFavorites) => {\n  //     const updatedFavorites = [...prevFavorites];\n  //     updatedFavorites.splice(index, 1);\n  //     return updatedFavorites;\n  //   });\n  //   console.log(\"indexi\", index);\n  // };\n\n  console.log(favorites, \"favorites\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game of Thrones Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fetch a list from an API and display it\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"fetch-button\",\n      onClick: fetchBooks,\n      disabled: loading,\n      children: [loading ?\n      /*#__PURE__*/\n      // Display a spinner when loading\n      _jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : progress === 100 ?\n      // Display \"Books\" when progress is 100%\n      \"Books\" :\n      // Display \"Fetch Data\" otherwise\n      \"Fetch Data\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage\",\n        children: [progress.toFixed(0), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => setShowFavorites(!showFavorites),\n        children: showFavorites ? \"Show Fetched Books\" : \"Show Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), showSortComponent && !sortbutton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => setSortButton(true),\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), showFavorites && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: favorites.map((favoriteBook, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FavoriteBook, {\n          book: favoriteBook,\n          nr: index + 1,\n          removeFromFavorites: removeFromFavorites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this)\n      }, favoriteBook.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), showSortComponent && !showFavorites && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: sortbutton ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: /*#__PURE__*/_jsxDEV(SortBookCards, {\n          books: books\n        }, books.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: books.map((book, index) => /*#__PURE__*/_jsxDEV(BookCard, {\n          addToFavorites: addToFavorites,\n          book: book,\n          nr: index + 1\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OjkxGiPqrUj+Y/AaJ2kktEFUtMs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BookCard","axios","SortBookCards","FavoriteBook","jsxDEV","_jsxDEV","App","_s","books","setBooks","loading","setLoading","progress","setProgress","sortbutton","setSortButton","showSortComponent","setShowSortComponent","favorites","setFavorites","showFavorites","setShowFavorites","fetchBooks","duration","startTime","Date","now","console","log","updateProgress","currentTime","elapsedTime","percentage","Math","min","progressInterval","setInterval","response","get","clearInterval","data","error","addToFavorites","book","some","favorite","id","removeFromFavorites","isbn","prevFavorites","updatedFavorites","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toFixed","map","favoriteBook","index","nr","_c","$RefreshReg$"],"sources":["C:/Users/arbre/OneDrive/Desktop/Inspire11internship/React2Task/src/components/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport BookCard from \"./BookCard\";\r\nimport axios from \"axios\";\r\nimport SortBookCards from \"./SortBookCard\";\r\nimport FavoriteBook from \"./FavoriteBook\";\r\n\r\nfunction App() {\r\n  const [books, setBooks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [sortbutton, setSortButton] = useState(false);\r\n  const [showSortComponent, setShowSortComponent] = useState(false);\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [showFavorites, setShowFavorites] = useState(false);\r\n\r\n  const fetchBooks = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setProgress(0);\r\n\r\n      // Simulate a 3-second delay\r\n      const duration = 3000;\r\n      const startTime = Date.now();\r\n      console.log(\"starttime\", startTime);\r\n      // Function to update progress\r\n      const updateProgress = () => {\r\n        const currentTime = Date.now();\r\n        const elapsedTime = currentTime - startTime;\r\n        const percentage = Math.min((elapsedTime / duration) * 100, 100); //exp.elapsedtime=1sec/3sec=33.33%\r\n        setProgress(percentage);\r\n      };\r\n\r\n      // Start updating progress every 100 milliseconds    0.1sec\r\n      const progressInterval = setInterval(updateProgress, 100);\r\n\r\n      const response = await axios.get(\r\n        \"https://www.anapioficeandfire.com/api/books?pageSize=30\"\r\n      );\r\n\r\n      // Clear the progress update interval when the request is complete\r\n      clearInterval(progressInterval);\r\n\r\n      console.log(response.data);\r\n      setBooks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n      // Set progress to 100% when data fetching is complete\r\n      setProgress(100);\r\n      setShowSortComponent(true);\r\n      setSortButton(false); // Reset sortbutton to false when fetching new data\r\n    }\r\n  };\r\n\r\n  const addToFavorites = (book) => {\r\n    if (!favorites.some((favorite) => favorite.id === book.id)) {\r\n      setFavorites([...favorites, book]);\r\n    }\r\n  };\r\n\r\n  \r\nconst removeFromFavorites = (isbn) => {\r\n  setFavorites((prevFavorites) => {\r\n    const updatedFavorites = prevFavorites.filter(\r\n      (favorite) => favorite.isbn !== isbn\r\n    );\r\n    setFavorites ( updatedFavorites);\r\n  });\r\n  console.log(\"ISBN to remove:\", isbn);\r\n\r\n\r\n};\r\n\r\n\r\n\r\n  // const removeFromFavorites = (index) => {\r\n  //   setFavorites((prevFavorites) => {\r\n  //     const updatedFavorites = [...prevFavorites];\r\n  //     updatedFavorites.splice(index, 1);\r\n  //     return updatedFavorites;\r\n  //   });\r\n  //   console.log(\"indexi\", index);\r\n  // };\r\n\r\n  console.log(favorites, \"favorites\");\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Game of Thrones Books</h1>\r\n\r\n      <h2>Fetch a list from an API and display it</h2>\r\n\r\n      <button className=\"fetch-button\" onClick={fetchBooks} disabled={loading}>\r\n        {/* Conditional rendering based on \"loading\" state */}\r\n        {loading ? (\r\n          // Display a spinner when loading\r\n          <div className=\"spinner\"></div>\r\n        ) : progress === 100 ? (\r\n          // Display \"Books\" when progress is 100%\r\n          \"Books\"\r\n        ) : (\r\n          // Display \"Fetch Data\" otherwise\r\n          \"Fetch Data\"\r\n        )}\r\n        {/* Display progress percentage */}\r\n        <div className=\"percentage\">{progress.toFixed(0)}%</div>\r\n      </button>\r\n      <br />\r\n\r\n      <div className=\"button-container\">\r\n        {/* Toggle \"showFavorites\" state */}\r\n        <button\r\n          className=\"buttons\"\r\n          onClick={() => setShowFavorites(!showFavorites)}\r\n        >\r\n          {showFavorites ? \"Show Fetched Books\" : \"Show Favorites\"}\r\n        </button>\r\n\r\n        {/* Conditional rendering of \"Sort\" button based on state */}\r\n        {showSortComponent && !sortbutton && (\r\n          <button className=\"buttons\" onClick={() => setSortButton(true)}>\r\n            Sort\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Conditional rendering of favorite books */}\r\n      {showFavorites && (\r\n        <div className=\"grid-container\">\r\n          {/* Map and render favorite books using \"FavoriteBook\" component */}\r\n          {favorites.map((favoriteBook, index) => (\r\n            <div key={favoriteBook.id}>\r\n              <FavoriteBook\r\n                book={favoriteBook}\r\n                nr={index + 1}\r\n                removeFromFavorites={removeFromFavorites}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Conditional rendering of sorted or unsorted books */}\r\n      {showSortComponent && !showFavorites && (\r\n        <div className=\"button-container\">\r\n          {sortbutton ? (\r\n            <div className=\"grid-container\">\r\n              {/* Render sorted books using \"SortBookCards\" component with their props */}\r\n              <SortBookCards books={books} key={books.id} />\r\n            </div>\r\n          ) : (\r\n            <div className=\"grid-container\">\r\n              {/* Map and render unsorted books using \"BookCard\" component  with their props*/}\r\n              {books.map((book, index) => (\r\n                <BookCard\r\n                  addToFavorites={addToFavorites}\r\n                  book={book}\r\n                  key={book.id}\r\n                  nr={index + 1}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}