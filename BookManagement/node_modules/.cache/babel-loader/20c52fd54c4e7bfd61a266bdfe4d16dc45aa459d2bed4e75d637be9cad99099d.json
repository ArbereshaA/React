{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arbre\\\\OneDrive\\\\Desktop\\\\Inspire11internship\\\\React2Task\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BookCard from \"./BookCard\";\nimport axios from \"axios\";\nimport SortBookCards from \"./SortBookCard\";\nimport FavoriteBook from \"./FavoriteBook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [books, setBooks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [sortbutton, setSortButton] = useState(false);\n  const [showSortComponent, setShowSortComponent] = useState(false);\n  const [favorites, setFavorites] = useState([]);\n  const [showFavorites, setShowFavorites] = useState(false);\n  const [sortedBooks, setSortedBooks] = useState([]);\n  const fetchBooks = async () => {\n    try {\n      setLoading(true);\n      setProgress(0);\n\n      // Simulate a 3-second delay\n      const duration = 3000;\n      const startTime = Date.now();\n      console.log(\"starttime\", startTime);\n      // Function to update progress\n      const updateProgress = () => {\n        const currentTime = Date.now();\n        const elapsedTime = currentTime - startTime;\n        const percentage = Math.min(elapsedTime / duration * 100, 100); //exp.elapsedtime=1sec/3sec=33.33%\n        setProgress(percentage);\n      };\n\n      // Start updating progress every 100 milliseconds    0.1sec\n      const progressInterval = setInterval(updateProgress, 100);\n      const response = await axios.get(\"https://www.anapioficeandfire.com/api/books?pageSize=30\");\n\n      // Clear the progress update interval when the request is complete\n      clearInterval(progressInterval);\n      console.log(response.data);\n      setBooks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n      // Set progress to 100% when data fetching is complete\n      setProgress(100);\n      setShowSortComponent(true);\n      setSortButton(false); // Reset sortbutton to false when fetching new data\n    }\n  };\n\n  const addToFavorites = book => {\n    if (!favorites.some(favorite => favorite.isbn === book.isbn)) {\n      setFavorites([...favorites, book]);\n    }\n  };\n  const removeFromFavorites = index => {\n    setFavorites(prevFavorites => {\n      const updatedFavorites = [...prevFavorites];\n      updatedFavorites.splice(index, 1);\n      return updatedFavorites;\n    });\n    console.log(\"indexi\", index);\n  };\n  // Sort books by released date in descending order\n  const sortBooksByReleasedDate = booksArray => {\n    return [...booksArray].sort((a, b) => {\n      return new Date(a.released) - new Date(b.released);\n    });\n  };\n  const handleSortBooks = () => {\n    if (!sortbutton) {\n      // Sort the books and set them in the sortedBooks state\n      const sorted = sortBooksByReleasedDate(books);\n      setSortedBooks(sorted);\n    } else {\n      // If the button is clicked again, reset to unsorted state\n      setSortedBooks([]);\n    }\n\n    // Toggle the sort button state\n    setSortButton(!sortbutton);\n  };\n  console.log(favorites, \"favorites\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game of Thrones Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fetch a list from an API and display it\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"fetch-button\",\n      onClick: fetchBooks,\n      disabled: loading,\n      children: [loading ?\n      /*#__PURE__*/\n      // Display a spinner when loading\n      _jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : progress === 100 ?\n      // Display \"Books\" when progress is 100%\n      \"Books\" :\n      // Display \"Fetch Data\" otherwise\n      \"Fetch Data\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage\",\n        children: [progress.toFixed(0), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => setShowFavorites(!showFavorites),\n        children: showFavorites ? \"Show Fetched Books\" : \"Show Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), showSortComponent && !sortbutton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: () => setSortButton(!sortbutton),\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), showFavorites && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: favorites.map((favoriteBook, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FavoriteBook, {\n          book: favoriteBook,\n          nr: index + 1,\n          removeFromFavorites: removeFromFavorites,\n          hanleSoort: handleSortBooks,\n          sortbutton: sortbutton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)\n      }, favoriteBook.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), showSortComponent && !showFavorites && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: sortbutton ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: /*#__PURE__*/_jsxDEV(SortBookCards, {\n          books: sortedBooks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: books.map((book, index) => /*#__PURE__*/_jsxDEV(BookCard, {\n          addToFavorites: addToFavorites,\n          book: book,\n          nr: index + 1\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CJaVoLRgnE+T/6ojv3aRy4tAmJ0=\");\n_c = App;\nexport default App;\n\n// const removeFromFavorites = (isbn) => {\n//   setFavorites((prevFavorites) => {\n//     const updatedFavorites = prevFavorites.filter(\n//       (favorite) => favorite.isbn !== isbn\n//     );\n//     setFavorites ( updatedFavorites);\n//   });\n//   console.log(\"ISBN to remove:\", isbn);\n\n// };\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BookCard","axios","SortBookCards","FavoriteBook","jsxDEV","_jsxDEV","App","_s","books","setBooks","loading","setLoading","progress","setProgress","sortbutton","setSortButton","showSortComponent","setShowSortComponent","favorites","setFavorites","showFavorites","setShowFavorites","sortedBooks","setSortedBooks","fetchBooks","duration","startTime","Date","now","console","log","updateProgress","currentTime","elapsedTime","percentage","Math","min","progressInterval","setInterval","response","get","clearInterval","data","error","addToFavorites","book","some","favorite","isbn","removeFromFavorites","index","prevFavorites","updatedFavorites","splice","sortBooksByReleasedDate","booksArray","sort","a","b","released","handleSortBooks","sorted","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","toFixed","map","favoriteBook","nr","hanleSoort","id","_c","$RefreshReg$"],"sources":["C:/Users/arbre/OneDrive/Desktop/Inspire11internship/React2Task/src/components/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport BookCard from \"./BookCard\";\r\nimport axios from \"axios\";\r\nimport SortBookCards from \"./SortBookCard\";\r\nimport FavoriteBook from \"./FavoriteBook\";\r\n\r\nfunction App() {\r\n  const [books, setBooks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [sortbutton, setSortButton] = useState(false);\r\n  const [showSortComponent, setShowSortComponent] = useState(false);\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [showFavorites, setShowFavorites] = useState(false);\r\n  const [sortedBooks, setSortedBooks] = useState([]);\r\n\r\n  const fetchBooks = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setProgress(0);\r\n\r\n      // Simulate a 3-second delay\r\n      const duration = 3000;\r\n      const startTime = Date.now();\r\n      console.log(\"starttime\", startTime);\r\n      // Function to update progress\r\n      const updateProgress = () => {\r\n        const currentTime = Date.now();\r\n        const elapsedTime = currentTime - startTime;\r\n        const percentage = Math.min((elapsedTime / duration) * 100, 100); //exp.elapsedtime=1sec/3sec=33.33%\r\n        setProgress(percentage);\r\n      };\r\n\r\n      // Start updating progress every 100 milliseconds    0.1sec\r\n      const progressInterval = setInterval(updateProgress, 100);\r\n\r\n      const response = await axios.get(\r\n        \"https://www.anapioficeandfire.com/api/books?pageSize=30\"\r\n      );\r\n\r\n      // Clear the progress update interval when the request is complete\r\n      clearInterval(progressInterval);\r\n\r\n      console.log(response.data);\r\n      setBooks(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n      // Set progress to 100% when data fetching is complete\r\n      setProgress(100);\r\n      setShowSortComponent(true);\r\n      setSortButton(false); // Reset sortbutton to false when fetching new data\r\n    }\r\n  };\r\n\r\n  const addToFavorites = (book) => {\r\n    if (!favorites.some((favorite) => favorite.isbn === book.isbn)) {\r\n      setFavorites([...favorites, book]);\r\n    }\r\n  };\r\n\r\n  const removeFromFavorites = (index) => {\r\n    setFavorites((prevFavorites) => {\r\n      const updatedFavorites = [...prevFavorites];\r\n      updatedFavorites.splice(index, 1);\r\n      return updatedFavorites;\r\n    });\r\n    console.log(\"indexi\", index);\r\n  };\r\n  // Sort books by released date in descending order\r\n  const sortBooksByReleasedDate = (booksArray) => {\r\n    return [...booksArray].sort((a, b) => {\r\n      return new Date(a.released) - new Date(b.released);\r\n    });\r\n  };\r\n\r\n  const handleSortBooks = () => {\r\n    if (!sortbutton) {\r\n      // Sort the books and set them in the sortedBooks state\r\n      const sorted = sortBooksByReleasedDate(books);\r\n      setSortedBooks(sorted);\r\n    } else {\r\n      // If the button is clicked again, reset to unsorted state\r\n      setSortedBooks([]);\r\n    }\r\n\r\n    // Toggle the sort button state\r\n    setSortButton(!sortbutton);\r\n  };\r\n\r\n  console.log(favorites, \"favorites\");\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Game of Thrones Books</h1>\r\n\r\n      <h2>Fetch a list from an API and display it</h2>\r\n\r\n      <button className=\"fetch-button\" onClick={fetchBooks} disabled={loading}>\r\n        {/* Conditional rendering based on \"loading\" state */}\r\n        {loading ? (\r\n          // Display a spinner when loading\r\n          <div className=\"spinner\"></div>\r\n        ) : progress === 100 ? (\r\n          // Display \"Books\" when progress is 100%\r\n          \"Books\"\r\n        ) : (\r\n          // Display \"Fetch Data\" otherwise\r\n          \"Fetch Data\"\r\n        )}\r\n        {/* Display progress percentage */}\r\n        <div className=\"percentage\">{progress.toFixed(0)}%</div>\r\n      </button>\r\n      <br />\r\n\r\n      <div className=\"button-container\">\r\n        {/* Toggle \"showFavorites\" state */}\r\n        <button\r\n          className=\"buttons\"\r\n          onClick={() => setShowFavorites(!showFavorites)}\r\n        >\r\n          {showFavorites ? \"Show Fetched Books\" : \"Show Favorites\"}\r\n        </button>\r\n\r\n        {/* Conditional rendering of \"Sort\" button based on state */}\r\n        {showSortComponent && !sortbutton && (\r\n          <button\r\n            className=\"buttons\"\r\n            onClick={() => setSortButton(!sortbutton)}\r\n          >\r\n            Sort\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Conditional rendering of favorite books */}\r\n      {showFavorites && (\r\n        <div className=\"grid-container\">\r\n          {/* Map and render favorite books using \"FavoriteBook\" component */}\r\n          {favorites.map((favoriteBook, index) => (\r\n            <div key={favoriteBook.id}>\r\n              <FavoriteBook\r\n                book={favoriteBook}\r\n                nr={index + 1}\r\n                removeFromFavorites={removeFromFavorites}\r\n                hanleSoort={handleSortBooks}\r\n                sortbutton={sortbutton}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Conditional rendering of sorted or unsorted books */}\r\n      {showSortComponent && !showFavorites && (\r\n  <div className=\"grid-container\">\r\n    {sortbutton ? (\r\n      <div className=\"grid-container\">\r\n        <SortBookCards books={sortedBooks} />\r\n      </div>\r\n    ) : (\r\n      <div className=\"grid-container\">\r\n        {books.map((book, index) => (\r\n          <BookCard\r\n            addToFavorites={addToFavorites}\r\n            book={book}\r\n            key={book.id}\r\n            nr={index + 1}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </div>\r\n)}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n// const removeFromFavorites = (isbn) => {\r\n//   setFavorites((prevFavorites) => {\r\n//     const updatedFavorites = prevFavorites.filter(\r\n//       (favorite) => favorite.isbn !== isbn\r\n//     );\r\n//     setFavorites ( updatedFavorites);\r\n//   });\r\n//   console.log(\"ISBN to remove:\", isbn);\r\n\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}